#include<bits/stdc++.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<signal.h>

#define check cout<<"---------\n"

using namespace std;

void pwd(char *curdirec);
void echo(vector <char *> params);
void cd(vector <char *> params);
void execute(vector <char *> params,vector < pair <bool,int> > redir,int blackflag);
void add_logentry(string log);
void history();
void jobs();
void background(vector <char *> params);
void redirect(bool type,int index,vector <char *> params);
void overkill();
void kjob(vector <char *> params);

string command,s;
char buff[PATH_MAX + 1],perm[PATH_MAX + 1];
char system_name[PATH_MAX + 1];
char *username;
char *current;
char *subtoken;
vector <string> userinput;
vector <char *> args;
vector <pair <string, pair<int,bool> > > current_jobs;

int main()
{
	int cdflag = 0,echoflag = 0,randomflag = 0;
	int pos;
	int index,redtype=0,redirectflag;
	int start,end;
	char *direc;
	char *curdirec;
	char *location;
	vector <char *> args;
	vector< pair <bool,int> > redir;
	gethostname(system_name,PATH_MAX + 1);
	username = getlogin();
	direc = getcwd(perm,PATH_MAX + 1);
	while(1)
	{	
		curdirec = getcwd(buff,PATH_MAX + 1);
		if(strcmp(direc,curdirec) == 0)
			cout << "<" << username << "@" << system_name << ":~> ";
		else 
			cout << "<" << username << "@" << system_name << ":" << curdirec << "> ";
		getline(cin,command);
		if(command.empty())
			continue;
		add_logentry(command);
		char *temp = &command[0];
		char *token = strtok(temp,";");	
		while(token != NULL)
		{
			int backflag = 0;
			index = 0;
			redirectflag = 0;
			subtoken = strtok_r(token," \t",&token);
			char *program = subtoken;
			while(subtoken != NULL)
			{	
				args.push_back(subtoken);
				if(strcmp(args.back(),"<")==0)
					redir.push_back(make_pair(0,args.size()-1));
				else if(strcmp(args.back(),">")==0)
					redir.push_back(make_pair(1,args.size()-1));
				subtoken = strtok_r(NULL," ",&token);
			}				
			if(strcmp(args.back(),"&") ==0)
				backflag = 1;
			if(strcmp(program,"echo") == 0)
				echo(args);
			else if(strcmp(program,"pwd") == 0)
				pwd(curdirec);
			else if(strcmp(program,"cd") == 0)
				cd(args);
			else if(strcmp(program,"quit") == 0)
				exit(0);
			else if(strcmp(program,"history")==0)
				history();
			else if(strcmp(program,"jobs")==0)
				jobs();
			else if(strcmp(program,"overkill")==0)
				overkill();
			else if(strcmp(program,"kjob")==0)
				kjob(args);
			else
				execute(args,redir,backflag);
			args.clear();
			redir.clear();
			token = strtok(NULL,";");	
		}
	}
	return 0;
}

//implement the kjob command
void kjob(vector <char *> args)
{
	if(args.size() != 3)
	{
		cout << "Invalid number of arguments" << endl;
		return ;
	}
	else
	{
		int job_id;
		job_id = stoi(args[1]) - 1;
		if(job_id > current_jobs.size())
		{
			cout << "Invalid job id" << endl;
			return ;
		}
		int sig;
		sig = stoi(args[2]);
		kill(current_jobs[job_id].second.first,sig);
	}
	return ;
}

//implement the overkill funtion
void overkill()
{
	int i;
	i = 0;
	while(i < current_jobs.size())
	{
		kill(current_jobs[i].second.first,9);
		i++;
	}
	return ;
}

//remove the finished background processes from the list
void remove(int process_id)
{
	cout << process_id << endl;
	int i;
	i = 0;
	while(i < current_jobs.size())
	{
		if(current_jobs[i].second.first == process_id)
		{
			current_jobs[i].second.second = 0;
			break;
		}		
		i++;
	}
	return ;
}

//print all the currently running jobs
void jobs()
{
	int i;
	i = 0;
	while(i < current_jobs.size())
	{
		if(current_jobs[i].second.second == 1)
		{
			cout << "[" << i+1 << "] " << current_jobs[i].first << "[" << current_jobs[i].second.first<< "]";
			cout << endl;
		}	
		i++;
	}
	return ;
}

//Maintaing a log for the executed commands
void add_logentry(string log_entry)
{
	userinput.push_back(log_entry);	
	return ;
}

//Displaying the already executed commands
void history()
{
	for(int i=0;i < userinput.size(); i++)
		cout << i+1 << "  " << userinput[i] << endl;
	return ;
}

//display the present directory
void pwd(char *curdirec)
{
	cout << curdirec << endl;
	return ;
}

//display user input as a string on the terminal
void echo(vector <char *> params)
{
	for(int i=1; i< params.size(); i++)
		cout << params[i] << " ";
	cout << endl;
	return ;
}

//change the directory to s
void cd(vector <char *> params)
{
	chdir(params[1]);
	return ;
}

void bg_close(int signo)
{
	int killed=0;
	while((killed=waitpid(-1,NULL,WNOHANG))>0)
	{
		printf("process with pid : %d exited\n",killed);
		remove(killed);
	}
	return ;
}
//execute system commands 
void execute(vector <char *> params, vector < pair <bool,int> > redir, int backgroundflag)
{
	signal( SIGCHLD, bg_close);
	char **a = new char* [params.size()];
	a = &params[0];
	pid_t pid, wpid;
	int status;
	pid = fork();
	a[params.size()] = NULL;
	if (pid == 0)
	{
		if(!redir.empty())
		{
			redirect(redir[0].first, redir[0].second, params);
			a[redir[0].second] = NULL;
		}
		if(backgroundflag == 1)
		{
			a[params.size()-1] = NULL;
			setpgid(0,0);
		}
		// Child process
		if (execvp(a[0],a) == -1)
		{
			perror("lsh");
		}
		exit(EXIT_FAILURE);
	}
	else if (pid < 0)
	{
		// Error forking
		perror("lsh");
	}
	else
	{
		// Parent process
		if(!backgroundflag)
		{
			do 
			{
				wpid = waitpid(pid, &status, WUNTRACED);

			} while (!WIFEXITED(status) && !WIFSIGNALED(status));
		}
		else
			current_jobs.push_back(make_pair(params[0],make_pair(pid,1)));
		

	}
	return ;
}

//implementing redirection
void redirect(bool a,int index,vector <char *> args)
{
	int fd0,fd1;
	if(!a)
	{
		fd0 = open(args[index-1],O_RDONLY,0);
		dup2(fd0,STDIN_FILENO);
		close(fd0);
	}
	else
	{
		fd1 = creat(args[index+1],0644);
		dup2(fd1,STDOUT_FILENO);
		close(fd1);
	}
	return ;
}
